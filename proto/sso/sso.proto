//У НИКОЛАЯ ФАЙ PROTOS - ЭТО ОТДЕЛЬНЫЙ ПРОЕКТ, ОН ОПУБЛИКОВЫВАЕТ ЕГО НА ГИТХАБЕ, ПОСЛЕ ЧЕГО ЧЕРЕЗ КОМАНДУ GO GET ИМПОРТИРУЕТ В ПРОЕКТ SSO, Я ПРОСТО, Я НЕ СТАЛ ЗАГРУЖАТЬ СВОЙ ФАЙЛ ПРОТОC НА GITHUB И ПРОСТО ЗАГРУЗИЛ ФАЙЛ НИКОЛАЯ
//ЭТО ВАЖНО ДЛЯ МОЕГО ПОИМАНИЯ ЧТО ДА КАК, ПРОТО ЭТО ОЧЕНЬ ВАЖНО, ТАК КАК БЕЗ НЕГО У НАС ПРОСТО НЕ ПОЛУЧИТСЯ GRPC СЕРВЕРА 
// GO MOD И GO SUM В МОЁМ ПРОЕКТЕ СЧИТАЙТЕ ТОЛЬКО ДЛЯ ПАПКИ SSO
syntax = "proto3";

package auth;

option go_package = "tuzov.sso.v1;ssov1";

service Auth {
    rpc Register (RegisterRequest) returns (ReqisterResopnse);
    rpc Login (LoginRequest) returns (LoginResponse);
    rpc IsAdmin (IsAdminRequest) returns (IsAdmineResponse);
} 

// Каждое сообщение описывает структуру данных, которые будут передаваться между клиентом и сервером.
// 1. Идентификация полей: Номера полей используются для идентификации данных при сериализации и десериализации. Они должны быть уникальными в пределах одного сообщения.

message RegisterRequest {
    string email = 1;
    string password = 2;
}

message ReqisterResopnse {
    int64 user_id = 1;
}

message LoginRequest { // LoginRequest — сообщение, содержащее email, пароль и идентификатор приложения (app_id), для которого пользователь пытается войти.
    string email = 1;
    string password = 2;
    int32 app_id = 3;
}

message LoginResponse {
    string token = 1;
}

message IsAdminRequest {
   int64 user_id = 1;
}

message IsAdmineResponse {
    bool is_admin = 1;
}

// под роликом у николая тузова ссылка и руководство по установке protoc и сопутствующих файлов для генерации кода на го, обязательно установить. тайм код ролика 23:38

